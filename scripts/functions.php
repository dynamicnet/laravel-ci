<?php

require __DIR__ . "/vendor/autoload.php";

use Symfony\Component\Filesystem\Path;

function get_env($varname, $default = null)
{
    if (! isset($_ENV[$varname])) {
        return $default;
    }

    return $_ENV[$varname];
}

function cast_bool($value)
{
    if ("true" === trim($value)) {
        return true;
    }

    if ("false" === trim($value)) {
        return false;
    }

    return boolval($value);
}

/**
 * Check that a directory path is safe
 *
 */
function check_safe_dir($dirname, &$error = "")
{
    $DEPLOY_DIR = Path::canonicalize($dirname);

    // Le path résolu ne doit pas être dans la racine
    if ("/" == $DEPLOY_DIR) {
        $error = "Must not resolve to /";
        return false;
    }

    // Le path ne doit pas contenir de substitution du USER HOME DIR
    if (str_contains($dirname, "~")) {
        $error = "Must not contains ~";
        return false;
    }

    // Le path ne doit pas contenir de variables
    if (str_contains($dirname, '$')) {
        $error = "Must not contains any \$ symbol";
        return false;
    }

    // Le path ne doit pas contenir d'expansions
    if (str_contains($dirname, '*') || str_contains($dirname, '?') || str_contains($dirname, '[')) {
        $error = "Must not contains * or ? or [";
        return false;
    }

    // Le path de doit pas contenir de substitution de commande
    if (str_contains($dirname, '`')) {
        $error = "Must not contains any ` symbol";
        return false;
    }

    // Le path doit être un chemin absolu
    if (!Path::isAbsolute($dirname)) {
        $error = "Must be an absolute path";
        return false;
    }

    if (!str_ends_with($dirname, "/")) {
        $error = "Must end with a /";
        return false;
    }

    return true;
}

function get_supervisor_conf_tpl()
{
    return <<<'EOD'
    #
    # DO NOT EDIT THIS FILE MANUALLY
    #
    # THIS FILE WAS AUTOGENERATED BY A CI/CD PIPELINE
    # Gitlab project: {{CI_PROJECT_TITLE}} ({{CI_PROJECT_URL}})
    # Git refs: tag:{{CI_COMMIT_TAG}} / sha: {{CI_COMMIT_SHORT_SHA}}
    #

    [program:{{PROGRAM_NAME}}]
    process_name=%(program_name)s_%(process_num)02d
    command={{PHP_EXECUTABLE_PATH}} {{COMMAND}}
    autostart=true
    autorestart=true
    user={{USER}}
    numprocs={{NUM_PROCS}}
    redirect_stderr=true
    stdout_logfile={{LOGFILE}}
    stopwaitsecs=30
    EOD;
}

function build_key($val)
{
    return '{{' . $val . '}}';
}

if (!function_exists('str_contains')) {
    /**
     * Check if substring is contained in string
     *
     * @param $haystack
     * @param $needle
     *
     * @return bool
     */
    function str_contains($haystack, $needle)
    {
        return (strpos($haystack, $needle) !== false);
    }
}

if (!function_exists('str_ends_with')) {
    function str_ends_with(string $haystack, string $needle): bool
    {
        return strlen($needle) === 0 || substr($haystack, -strlen($needle)) === $needle;
    }
}

/**
 * Retourne le chaine de la commande SSH de base configurée avec le
 * user et le host définis par les variables d'environnement
 */
function ssh_cmd($cmd)
{
    $DEPLOY_TARGET_HOST = get_env("DEPLOY_TARGET_HOST");
    $DEPLOY_USER = get_env("DEPLOY_USER");

    return "ssh -ttq {$DEPLOY_USER}@{$DEPLOY_TARGET_HOST} \"{$cmd}\"";
}

/**
 * Génére le fichier de config Supervisor si les variables d'envionnement
 * voulues sont settées
 */
function build_supervisor_config(&$outputs)
{
    $SUPERVISOR_PROGRAM_NAME = get_env("SUPERVISOR_PROGRAM_NAME");
    $CI_ENVIRONMENT_NAME = get_env("CI_ENVIRONMENT_NAME");
    $DEPLOY_DIR = get_env("DEPLOY_DIR", "");
    $DEPLOY_ARTISAN_PATH = get_env("DEPLOY_ARTISAN_PATH");
    $DEPLOY_HOST_PHP_PATH = get_env("DEPLOY_HOST_PHP_PATH");

    if ("" == $SUPERVISOR_PROGRAM_NAME) {
        return;
    }

    $CONF_FILENAME = $SUPERVISOR_PROGRAM_NAME . "_" . $CI_ENVIRONMENT_NAME . ".conf";
    $PROGRAM_NAME = $SUPERVISOR_PROGRAM_NAME . "_" . $CI_ENVIRONMENT_NAME;


    $replacements = [
        "CI_COMMIT_TAG" => get_env("CI_COMMIT_TAG"),
        "CI_COMMIT_SHORT_SHA" => get_env("CI_COMMIT_SHORT_SHA"),
        "CI_PROJECT_TITLE" => get_env("CI_PROJECT_TITLE"),
        "CI_PROJECT_URL" => get_env("CI_PROJECT_URL"),
        "PROGRAM_NAME" => $PROGRAM_NAME,
        "USER" => get_env("DEPLOY_USER"),
        "NUM_PROCS" => get_env("SUPERVISOR_NUM_PROCS", 2),
        "LOGFILE" => $DEPLOY_DIR . "storage/logs/workers.log",
        "COMMAND" => $DEPLOY_ARTISAN_PATH . " queue:work --sleep=3 --tries=3 --max-time=120",
        "PHP_EXECUTABLE_PATH" => $DEPLOY_HOST_PHP_PATH,
    ];

    $keys = array_keys($replacements);
    $keys = array_map("build_key", $keys);

    $conf = str_replace($keys, array_values($replacements), get_supervisor_conf_tpl());

    echo 'echo -e "' . $conf . '" > ' . $CONF_FILENAME . '' . "\n";

    $outputs["SUPERVISOR_CONF_FILENAME"] = $CONF_FILENAME;
    $outputs["SUPERVISOR_PROGRAM_NAME"] = $PROGRAM_NAME;
}

/**
 * Génère le commande de création du lien symbolique pour
 * la configuration Supervisor
 */
function symlink_supervisor_config_file(&$outputs)
{
    if (!isset($outputs["SUPERVISOR_CONF_FILENAME"])) {
        return;
    }

    $DEPLOY_DIR = get_env("DEPLOY_DIR", "");
    $CONF_FILENAME = $outputs["SUPERVISOR_CONF_FILENAME"];
    $CONF_DIR = get_env("SUPERVISOR_CONFD_DIR", "/etc/supervisor/conf.d");

    echo ssh_cmd("ln -sf " . $DEPLOY_DIR . $CONF_FILENAME . " " . $CONF_DIR . "/" . $CONF_FILENAME) . PHP_EOL;
}

/**
 * Selon le contexte, démarre ou met à jour les processus supervisor
 */
function update_supervisor_processes(&$outputs)
{
    if (!isset($outputs["SUPERVISOR_PROGRAM_NAME"])) {
        return;
    }

    $PROGRAM_NAME = $outputs["SUPERVISOR_PROGRAM_NAME"];


    /**
     * Update va lire le fichier de config et si le programme n'existe pas
     * il va être ajouté et démarré
     *
     * si il existe, le programme n'est pas redémarré par cette commande
     */
    echo "set +e", "\n";
    echo "STATUS=`", ssh_cmd("supervisorctl update {$PROGRAM_NAME}"), "`\n";
    echo "set -e", "\n";

    // Si les workers sont déjà gérés par supervisor et actif, on les restart
    echo 'if [[ $STATUS != *"added process group"* ]]; then' . "\n";
    echo "\t", 'echo "### RESTART SUPERVISOR"', PHP_EOL;
    echo "\t", ssh_cmd("supervisorctl restart {$PROGRAM_NAME}:*"), "\n";
    echo "fi", "\n";

    // Attend que les process démarrent avant de voir le status
    echo "sleep 5", "\n";
    echo "SUPERVISOR_STATUS=`", ssh_cmd("supervisorctl status {$PROGRAM_NAME}:*"), "`\n";

    echo 'echo "### SUPERVISOR STATUS"', PHP_EOL;
    echo 'echo "$SUPERVISOR_STATUS"', PHP_EOL;
}
